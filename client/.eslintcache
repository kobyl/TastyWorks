[{"E:\\Code\\tasty\\client\\src\\index.tsx":"1","E:\\Code\\tasty\\client\\src\\reportWebVitals.ts":"2","E:\\Code\\tasty\\client\\src\\App.tsx":"3","E:\\Code\\tasty\\client\\src\\lib\\Client.ts":"4","E:\\Code\\tasty\\client\\src\\components\\Header.tsx":"5"},{"size":468,"mtime":1611367656289,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1611242797025,"results":"8","hashOfConfig":"7"},{"size":487,"mtime":1611432316435,"results":"9","hashOfConfig":"7"},{"size":3603,"mtime":1611432263449,"results":"10","hashOfConfig":"7"},{"size":1992,"mtime":1611367209611,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"o6fxro",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"E:\\Code\\tasty\\client\\src\\index.tsx",[],["25","26"],"E:\\Code\\tasty\\client\\src\\reportWebVitals.ts",[],"E:\\Code\\tasty\\client\\src\\App.tsx",["27"],"E:\\Code\\tasty\\client\\src\\lib\\Client.ts",["28","29"],"import { Assert, LoginRequest, TypedMessage, GetOptionsRequest, GetOptionsResponse, OutgoingTypes } from 'tasty';\r\nimport { IncomingType, BaseResponse, LoginResponse } from 'tasty';\r\n\r\nexport class Client {\r\n    private socket: any;\r\n    private isOpen: boolean = false;\r\n    private url: string = '';\r\n    private listeners: { [key: string]: (data: any) => void } = {};\r\n    private requestId = 0;\r\n\r\n    connect = (url: string = \"ws://localhost:8081\") => {\r\n        return new Promise(((res: any, rej: any) => {\r\n            try {\r\n                this.url = url;\r\n                this.socket = new WebSocket(this.url);\r\n                this.socket.onopen = () => {\r\n                    this.registerAll();\r\n                    console.log(\"Connected to:\" + this.url);\r\n                    this.isOpen = true;\r\n                    res();\r\n                };\r\n\r\n                this.socket.onclose = this.unregisterAll;\r\n\r\n            } catch (e) {\r\n                rej(e);\r\n            }\r\n        }).bind(this))\r\n\r\n    }\r\n\r\n    registerAll = () => {\r\n        this.isOpen = true;\r\n        this.socket.onmessage = this.onMessage;\r\n    }\r\n\r\n    unregisterAll = () => {\r\n        this.isOpen = false;\r\n        this.socket.onmessage = null;\r\n    }\r\n\r\n    onMessage = (msg: MessageEvent) => {\r\n        if (!msg || !msg.data) {\r\n            Assert(false, \"msg and data must not be null\");\r\n            return;\r\n        }\r\n        try {\r\n            const data: BaseResponse = JSON.parse(msg.data);\r\n            const rid = data.requestId || -1;\r\n            console.table(data);\r\n            if (this.outstandings[rid]) {\r\n                this.outstandings[rid](data);\r\n                delete this.outstandings[rid];\r\n            }\r\n\r\n        } catch (e) {\r\n            console.warn(\"Unexpected non json data: \" + msg.data);\r\n        }\r\n    }\r\n\r\n    private outstandings: { [key: string]: (result: any) => void } = {};\r\n\r\n    send = (request: Partial<TypedMessage>, callback?: (result: any) => void) => {\r\n        let requestId = -1;\r\n        if (callback) {\r\n            requestId = ++this.requestId;\r\n            this.outstandings[requestId + ''] = callback;\r\n        }\r\n\r\n        request.requestId = requestId + '';\r\n\r\n        this.socket.send(JSON.stringify(request));\r\n    }\r\n\r\n    getOptions = (underlyings: string[]): Promise<GetOptionsResponse> => {\r\n        return new Promise<GetOptionsResponse>((resolve: any, reject: any) => {\r\n            if (!underlyings || !underlyings.length) {\r\n                reject();\r\n                return;\r\n            }\r\n\r\n            const request: Partial<GetOptionsRequest> = {\r\n                type: IncomingType.GetOptions,\r\n                underlyings\r\n            };\r\n            this.send(request,\r\n                (result: GetOptionsResponse) => {\r\n                    resolve(result);\r\n                });\r\n        });\r\n    }\r\n\r\n    login = (username: string, password: string): Promise<LoginResponse> => {\r\n        return new Promise((resolve: any, reject: any) => {\r\n            const req: Partial<LoginRequest> = {\r\n                type: IncomingType.Login,\r\n                username,\r\n                password\r\n            };\r\n            this.send(req,\r\n                (result: LoginResponse) => {\r\n                    if (result.errors && result.errors.length) {\r\n                        console.log(\"TW Login failed...\");\r\n                        reject(result);\r\n                    } else {\r\n                        resolve(result);\r\n                    }\r\n                });\r\n        }\r\n        );\r\n    }\r\n}","E:\\Code\\tasty\\client\\src\\components\\Header.tsx",["30"],"import * as React from 'react';\r\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button } from 'react-bootstrap';\r\n\r\ninterface props {\r\n    login: (username:string, password:string) => void;\r\n}\r\n\r\nexport class Header extends React.Component<props> {\r\n\r\n    private username: string = '';\r\n    private password: string = '';\r\n\r\n    updateUsername = (ev: any) => {\r\n        this.username = ev.target.value;\r\n    }\r\n    updatePassword = (ev: any) => {\r\n        this.password = ev.target.value;\r\n    }\r\n\r\n    render() {\r\n        let click: any = () => {\r\n            this.props.login(this.username, this.password);\r\n        }\r\n        \r\n        return <Navbar bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand href=\"#home\">Tasty Tool</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    {/* \r\n            <Nav.Link href=\"#home\">Home</Nav.Link>\r\n            <Nav.Link href=\"#link\">Link</Nav.Link>\r\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n            </NavDropdown>\r\n          */}\r\n                </Nav>\r\n                <Form inline>\r\n                    <FormControl type=\"text\" no-autocomplete placeholder=\"username\" className=\"mr-sm-2\" onChange={this.updateUsername} />\r\n                    <FormControl type=\"password\" className=\"mr-sm-2\" onChange={this.updatePassword} />\r\n                    <Button variant=\"outline-success\" onClick={click}>Login</Button>\r\n                </Form>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    }\r\n}",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":10,"column":7,"nodeType":"37","messageId":"38","endLine":10,"endColumn":21},{"ruleId":"35","severity":1,"message":"39","line":1,"column":85,"nodeType":"37","messageId":"38","endLine":1,"endColumn":98},{"ruleId":"40","severity":1,"message":"41","line":28,"column":12,"nodeType":"42","messageId":"43","endLine":28,"endColumn":16,"fix":"44"},{"ruleId":"35","severity":1,"message":"45","line":2,"column":23,"nodeType":"37","messageId":"38","endLine":2,"endColumn":34},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"@typescript-eslint/no-unused-vars","'ConnectContext' is assigned a value but never used.","Identifier","unusedVar","'OutgoingTypes' is defined but never used.","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"48","text":"49"},"'NavDropdown' is defined but never used.","no-global-assign","no-unsafe-negation",[1001,1012],""]