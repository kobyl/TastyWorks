[{"E:\\Code\\tasty\\client\\src\\index.tsx":"1","E:\\Code\\tasty\\client\\src\\reportWebVitals.ts":"2","E:\\Code\\tasty\\client\\src\\App.tsx":"3","E:\\Code\\tasty\\client\\src\\lib\\Client.ts":"4","E:\\Code\\tasty\\client\\src\\components\\Header.tsx":"5","E:\\Code\\tasty\\client\\src\\components\\Page.tsx":"6","E:\\Code\\tasty\\client\\src\\ClientContext.ts":"7","E:\\Code\\tasty\\client\\src\\components\\Status.tsx":"8","E:\\Code\\tasty\\client\\src\\components\\Quotes.tsx":"9","E:\\Code\\tasty\\client\\src\\components\\Actives.tsx":"10"},{"size":467,"mtime":1611535006408,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1611242797025,"results":"13","hashOfConfig":"12"},{"size":847,"mtime":1611592639417,"results":"14","hashOfConfig":"12"},{"size":5376,"mtime":1611619824655,"results":"15","hashOfConfig":"12"},{"size":1992,"mtime":1611367209611,"results":"16","hashOfConfig":"12"},{"size":2834,"mtime":1611603845147,"results":"17","hashOfConfig":"12"},{"size":187,"mtime":1611535006408,"results":"18","hashOfConfig":"12"},{"size":1615,"mtime":1611537669371,"results":"19","hashOfConfig":"12"},{"size":2426,"mtime":1611619947992,"results":"20","hashOfConfig":"12"},{"size":3198,"mtime":1611621034820,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"13c8arn",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Code\\tasty\\client\\src\\index.tsx",[],["46","47"],"E:\\Code\\tasty\\client\\src\\reportWebVitals.ts",[],"E:\\Code\\tasty\\client\\src\\App.tsx",[],"E:\\Code\\tasty\\client\\src\\lib\\Client.ts",["48","49","50","51"],"import { resolve } from 'dns';\r\nimport { Assert, LoginRequest, TypedMessage, GetOptionsRequest, GetOptionsResponse, OutgoingTypes, FlashOrderRequest, FlashOrderResponse } from 'tasty';\r\nimport { IncomingType, BaseResponse, LoginResponse, ClientQuotes } from 'tasty';\r\n\r\nexport enum ClientEvents {\r\n    connectedToServer,\r\n    disconnectedFromServer,\r\n    loggedIn,\r\n    onQuote,\r\n};\r\n\r\nexport class Client {\r\n    private socket: any;\r\n    private isOpen: boolean = false;\r\n    private url: string = '';\r\n    private listeners: { [key: string]: { (data: any): void }[] } = {};\r\n    private requestId = 0;\r\n\r\n    public connected = () => this.isOpen;\r\n\r\n    connect = (url: string = \"ws://localhost:8081\") => {\r\n        return new Promise(((res: any, rej: any) => {\r\n            if (this.isOpen) res();\r\n\r\n            try {\r\n                this.url = url;\r\n                this.socket = new WebSocket(this.url);\r\n                this.socket.onopen = () => {\r\n                    this.registerAll();\r\n                    console.log(\"Connected to:\" + this.url);\r\n                    this.isOpen = true;\r\n                    res();\r\n                    this.fire(ClientEvents.connectedToServer, null);\r\n                };\r\n\r\n                this.socket.onclose = this.unregisterAll;\r\n\r\n            } catch (e) {\r\n                rej(e);\r\n            }\r\n        }).bind(this))\r\n    }\r\n\r\n    on = (ev: ClientEvents, cb: (data: any) => void) => {\r\n        this.listeners[ev] = this.listeners[ev] || [];\r\n        this.listeners[ev].push(cb);\r\n    }\r\n\r\n    private fire = (ev: ClientEvents, data:any) => {\r\n        for(const cb of (this.listeners[ev] || [])) {\r\n            cb && cb(data);\r\n        }\r\n    }\r\n\r\n    private registerAll = () => {\r\n        this.isOpen = true;\r\n        this.socket.onmessage = this.onMessage;\r\n    }\r\n\r\n    private unregisterAll = () => {\r\n        this.isOpen = false;\r\n        this.socket.onmessage = null;\r\n        this.fire(ClientEvents.disconnectedFromServer, null);\r\n    }\r\n\r\n    private onMessage = (msg: MessageEvent) => {\r\n        if (!msg || !msg.data) {\r\n            Assert(false, \"msg and data must not be null\");\r\n            return;\r\n        }\r\n        const start = performance.now();\r\n        try {\r\n            const data: BaseResponse = JSON.parse(msg.data);\r\n            const rid = data.requestId || -1;\r\n            \r\n            if (this.outstandings[rid]) {\r\n                this.outstandings[rid](data);\r\n                delete this.outstandings[rid];\r\n            }else if(data.type === OutgoingTypes.Quote) {\r\n                const quotes = (data as ClientQuotes).quotes;\r\n                for(const l of this.listeners[ClientEvents.onQuote] || []) {\r\n                    l(quotes); \r\n                }\r\n                // debugger;\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n            console.warn(\"Unexpected non json data: \" + msg.data);\r\n        }\r\n        const end = performance.now();\r\n    }\r\n\r\n    private outstandings: { [key: string]: (result: any) => void } = {};\r\n\r\n    send = (request: Partial<TypedMessage>, callback?: (result: any) => void) => {\r\n        let requestId = -1;\r\n        if (callback) {\r\n            requestId = ++this.requestId;\r\n            this.outstandings[requestId + ''] = callback;\r\n        }\r\n\r\n        request.requestId = requestId + '';\r\n\r\n        this.socket.send(JSON.stringify(request));\r\n    }\r\n\r\n    flash = (symbol:string, account:string): Promise<any> => {\r\n        return new Promise<any>((res:any, rej:any) => {\r\n            const request: Partial<FlashOrderRequest> = {\r\n                type: IncomingType.FlashOrder,\r\n                symbol,\r\n                account\r\n            };\r\n\r\n            this.send(request, (result: FlashOrderResponse) => {\r\n                res(result);\r\n            });\r\n        });\r\n\r\n    }\r\n    getOptions = (underlyings: string[]): Promise<GetOptionsResponse> => {\r\n        return new Promise<GetOptionsResponse>((resolve: any, reject: any) => {\r\n            if (!underlyings || !underlyings.length) {\r\n                reject();\r\n                return;\r\n            }\r\n\r\n            const request: Partial<GetOptionsRequest> = {\r\n                type: IncomingType.GetOptions,\r\n                underlyings\r\n            };\r\n            this.send(request,\r\n                (result: GetOptionsResponse) => {\r\n                    resolve(result);\r\n                });\r\n        });\r\n    }\r\n\r\n    login = (username: string, password: string): Promise<LoginResponse> => {\r\n        return new Promise((resolve: any, reject: any) => {\r\n            const req: Partial<LoginRequest> = {\r\n                type: IncomingType.Login,\r\n                username,\r\n                password\r\n            };\r\n            this.send(req,\r\n                (result: LoginResponse) => {\r\n                    if (result.errors && result.errors.length) {\r\n                        console.log(\"TW Login failed...\");\r\n                        reject(result);\r\n                    } else {\r\n                        this.fire(ClientEvents.loggedIn, result);\r\n                        resolve(result);\r\n                    }\r\n                });\r\n        }\r\n        );\r\n    }\r\n}","E:\\Code\\tasty\\client\\src\\components\\Header.tsx",["52"],"import * as React from 'react';\r\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button } from 'react-bootstrap';\r\n\r\ninterface props {\r\n    login: (username:string, password:string) => void;\r\n}\r\n\r\nexport class Header extends React.Component<props> {\r\n\r\n    private username: string = '';\r\n    private password: string = '';\r\n\r\n    updateUsername = (ev: any) => {\r\n        this.username = ev.target.value;\r\n    }\r\n    updatePassword = (ev: any) => {\r\n        this.password = ev.target.value;\r\n    }\r\n\r\n    render() {\r\n        let click: any = () => {\r\n            this.props.login(this.username, this.password);\r\n        }\r\n        \r\n        return <Navbar bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand href=\"#home\">Tasty Tool</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    {/* \r\n            <Nav.Link href=\"#home\">Home</Nav.Link>\r\n            <Nav.Link href=\"#link\">Link</Nav.Link>\r\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n            </NavDropdown>\r\n          */}\r\n                </Nav>\r\n                <Form inline>\r\n                    <FormControl type=\"text\" no-autocomplete placeholder=\"username\" className=\"mr-sm-2\" onChange={this.updateUsername} />\r\n                    <FormControl type=\"password\" className=\"mr-sm-2\" onChange={this.updatePassword} />\r\n                    <Button variant=\"outline-success\" onClick={click}>Login</Button>\r\n                </Form>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    }\r\n}","E:\\Code\\tasty\\client\\src\\components\\Page.tsx",["53","54","55"],"E:\\Code\\tasty\\client\\src\\ClientContext.ts",[],"E:\\Code\\tasty\\client\\src\\components\\Status.tsx",["56","57","58","59","60"],"import * as React from 'react';\r\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button, Badge } from 'react-bootstrap';\r\nimport { ClientContext } from '../ClientContext';\r\nimport { Client, ClientEvents } from '../lib/Client';\r\n\r\ninterface State {\r\n    isConnected: boolean;\r\n    loggedInToTw: boolean;\r\n}\r\n\r\nexport class Status extends React.Component<any, State> {\r\n    static contextType = ClientContext;\r\n    state: State = {\r\n        isConnected: false,\r\n        loggedInToTw: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        const client: Client = this.context;\r\n        client.on(ClientEvents.connectedToServer, () => {\r\n            this.setState({ isConnected: true });\r\n        });\r\n        client.on(ClientEvents.disconnectedFromServer, () => {\r\n            this.setState({ isConnected: false });\r\n        });\r\n        client.on(ClientEvents.loggedIn, () => {\r\n            this.setState({ loggedInToTw: true });\r\n        });\r\n        this.setState({ isConnected: client.connected() });\r\n    }\r\n\r\n    render() {\r\n        const connectedColor = this.state.isConnected ? \"success\" : \"danger\";\r\n        const connectedMsg = this.state.isConnected ? \"Connected\" : \"Disconnected\";\r\n\r\n        const loggedInColor = this.state.loggedInToTw ? \"success\" : \"danger\";\r\n        const loggedInMsg = this.state.loggedInToTw ? \"TW\" : \"TW\";\r\n\r\n        return <Navbar bg=\"light\">\r\n            <Badge variant={connectedColor}>{connectedMsg}</Badge>&nbsp;\r\n            <Badge variant={loggedInColor}> {loggedInMsg}</Badge>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        </Navbar>\r\n    }\r\n}","E:\\Code\\tasty\\client\\src\\components\\Quotes.tsx",["61","62","63","64","65","66","67"],"E:\\Code\\tasty\\client\\src\\components\\Actives.tsx",["68","69","70","71"],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":1,"column":10,"nodeType":"78","messageId":"79","endLine":1,"endColumn":17},{"ruleId":"80","severity":1,"message":"81","line":41,"column":12,"nodeType":"82","messageId":"83","endLine":41,"endColumn":16,"fix":"84"},{"ruleId":"76","severity":1,"message":"85","line":71,"column":15,"nodeType":"78","messageId":"79","endLine":71,"endColumn":20},{"ruleId":"76","severity":1,"message":"86","line":91,"column":15,"nodeType":"78","messageId":"79","endLine":91,"endColumn":18},{"ruleId":"76","severity":1,"message":"87","line":2,"column":23,"nodeType":"78","messageId":"79","endLine":2,"endColumn":34},{"ruleId":"76","severity":1,"message":"88","line":6,"column":10,"nodeType":"78","messageId":"79","endLine":6,"endColumn":16},{"ruleId":"76","severity":1,"message":"89","line":23,"column":15,"nodeType":"78","messageId":"79","endLine":23,"endColumn":23},{"ruleId":"76","severity":1,"message":"90","line":61,"column":15,"nodeType":"78","messageId":"79","endLine":61,"endColumn":23},{"ruleId":"76","severity":1,"message":"91","line":2,"column":18,"nodeType":"78","messageId":"79","endLine":2,"endColumn":21},{"ruleId":"76","severity":1,"message":"87","line":2,"column":23,"nodeType":"78","messageId":"79","endLine":2,"endColumn":34},{"ruleId":"76","severity":1,"message":"92","line":2,"column":36,"nodeType":"78","messageId":"79","endLine":2,"endColumn":40},{"ruleId":"76","severity":1,"message":"93","line":2,"column":42,"nodeType":"78","messageId":"79","endLine":2,"endColumn":53},{"ruleId":"76","severity":1,"message":"94","line":2,"column":55,"nodeType":"78","messageId":"79","endLine":2,"endColumn":61},{"ruleId":"76","severity":1,"message":"92","line":2,"column":10,"nodeType":"78","messageId":"79","endLine":2,"endColumn":14},{"ruleId":"76","severity":1,"message":"95","line":2,"column":16,"nodeType":"78","messageId":"79","endLine":2,"endColumn":25},{"ruleId":"76","severity":1,"message":"96","line":2,"column":27,"nodeType":"78","messageId":"79","endLine":2,"endColumn":30},{"ruleId":"76","severity":1,"message":"97","line":2,"column":32,"nodeType":"78","messageId":"79","endLine":2,"endColumn":35},{"ruleId":"76","severity":1,"message":"98","line":2,"column":37,"nodeType":"78","messageId":"79","endLine":2,"endColumn":43},{"ruleId":"76","severity":1,"message":"93","line":2,"column":45,"nodeType":"78","messageId":"79","endLine":2,"endColumn":56},{"ruleId":"76","severity":1,"message":"94","line":2,"column":58,"nodeType":"78","messageId":"79","endLine":2,"endColumn":64},{"ruleId":"76","severity":1,"message":"92","line":2,"column":10,"nodeType":"78","messageId":"79","endLine":2,"endColumn":14},{"ruleId":"76","severity":1,"message":"98","line":2,"column":37,"nodeType":"78","messageId":"79","endLine":2,"endColumn":43},{"ruleId":"76","severity":1,"message":"93","line":2,"column":45,"nodeType":"78","messageId":"79","endLine":2,"endColumn":56},{"ruleId":"76","severity":1,"message":"94","line":2,"column":58,"nodeType":"78","messageId":"79","endLine":2,"endColumn":64},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"@typescript-eslint/no-unused-vars","'resolve' is defined but never used.","Identifier","unusedVar","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"101","text":"102"},"'start' is assigned a value but never used.","'end' is assigned a value but never used.","'NavDropdown' is defined but never used.","'Quotes' is defined but never used.","'accounts' is assigned a value but never used.","'response' is assigned a value but never used.","'Nav' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Navbar' is defined but never used.","no-global-assign","no-unsafe-negation",[1360,1371],""]